/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package camelinaction;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.RecipientList;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;

import javax.jms.ConnectionFactory;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.component.jms.JmsComponent;

public class Producer {
	
	@RecipientList
	public String routeTo() {
	        String queueList = "activemq:queue:test1,activemq:queue:test2";
	        return queueList;
	}

	public static void main(String args[]) throws Exception {
		// create CamelContext
		CamelContext context = new DefaultCamelContext();

		// connect to ActiveMQ JMS broker listening on localhost on port 61616
		ConnectionFactory connectionFactory = 
				new ActiveMQConnectionFactory("tcp://localhost:61616");
		context.addComponent("jms",
				JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));

		// add our route to the CamelContext
		context.addRoutes(new RouteBuilder() {
		
			
			public void configure() {				
				from("file:data/inbox?noop=true")
				.log("RECEIVED: ${file:name}")
				.unmarshal().csv()
				.split(body())
				.split(body(String.class).tokenize("\n")) // splitter, splitting up the big csv file with all crimes into separate lines (one line per crime)
				.process(new Processor() {
					public void process(Exchange e) throws Exception {
						String[] parts = e.getIn().getBody(String.class).split(","); // extract various substrings from data
						String id = parts[0];
						String city = parts[1];
						String dateTime = parts[2];
						String[] dateTimeParts = dateTime.split("/");
						String yearShort = dateTimeParts[2].split("\\s+")[0];
						String year = "20" + yearShort; // add 20 to make it 2006, 2007 etc. instead of 06, 07 - we assume the database only contains data after 2000
						String month = dateTimeParts[1];
						String crimeCategory = parts[8];
						System.out.println("MESSAGE FROM FILE: "
								+ e.getIn().getHeader("CamelFileName") + " is heading to main database, its city, its year, its month and its crime category queues for crime with ID: " + id);
						
					} })
				.bean(Producer.class, "routeTo")
				.to("jms:queue:MPCS_51050_final_main_database");// send each each crime to the main database queue 
				//.recipientList(simple("jms:queue:MPCS_51050_final_city${body.templateName}"));
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		});

		// start the route and let it do its work
		context.start();
		Thread.sleep(3000);

		// stop the CamelContext
		context.stop();
	}
}
